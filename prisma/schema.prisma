// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                String      @id @default(uuid())
  username          String      @unique
  email             String      @unique
  password          String
  noHandphone       String?     @unique
  passwordUpdatedAt DateTime
  accountIsVerified Boolean     @default(false)
  emailIsVerified   Boolean     @default(false)
  token             String?     @unique
  tokenExpiredAt    DateTime?
  tokenType         TOKEN_TYPE?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              Role        @relation(fields: [roleId], references: [id])
  roleId            String
  profil            Profil?
  Card              Card?       @relation(fields: [cardId], references: [id])
  cardId            String?     @unique
  rent              Rent[]
}

model Profil {
  id        String   @id @default(cuid())
  full_name String?
  photo     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id         String   @id @default(cuid())
  cardNumber String   @unique
  user       User?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Locker {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rent      Rent[]
}

model Rent {
  id                 String    @id @default(cuid())
  timeSchedule       DateTime?
  maximumCheckInTime DateTime?
  status             STATUS?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User?     @relation(fields: [userId], references: [id])
  userId             String?
  Locker             Locker?   @relation(fields: [lockerId], references: [id], onDelete: Cascade)
  lockerId           String?
}

enum TOKEN_TYPE {
  RESET_TOKEN
  VERIFICATION_TOKEN
  OTP_LOCKER
}

enum STATUS {
  BOOKED
  USED
  EMPTY
}
